{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport React from 'react';\nexport var getTreeDataFromTreeChildren = function (treeChildren) {\n  var loop = function (children) {\n    return React.Children.map(children, function (child) {\n      if (!React.isValidElement(child)) {\n        return;\n      }\n      var key = child.key;\n      return __assign(__assign({}, child.props), {\n        key: key,\n        children: loop(child.props.children)\n      });\n    });\n  };\n  return loop(treeChildren);\n};\nexport function getChildNodeKeys(node, key2nodeProps) {\n  var nodes = new Set();\n  var loop = function (children) {\n    children.map(function (child) {\n      var key = child.key;\n      var item = key2nodeProps[key];\n      if (!item || item.disabled || item.disableCheckbox || item.checkable === false) {\n        return;\n      }\n      nodes.add(key);\n      loop(item.children || []);\n    });\n  };\n  if (node) {\n    loop(node.children || []);\n  }\n  return nodes;\n}\nvar updateParent = function (key, key2nodeProps, allKeys, indeterminateKeysSet) {\n  var pathParentKeys = __spreadArray([], __read(key2nodeProps[key].pathParentKeys), false);\n  // 逐级更新父节点的状态\n  pathParentKeys.reverse().forEach(function (itemKey) {\n    var parent = key2nodeProps[itemKey];\n    if (parent && !parent.disabled && !parent.disableCheckbox && parent.checkable !== false) {\n      var total_1 = 0;\n      var number_1 = 0;\n      parent.children.some(function (_a) {\n        var key = _a.key;\n        var item = key2nodeProps[key];\n        // 不符合可选条件\n        if (!item || item.disabled || item.disableCheckbox || item.checkable === false) {\n          return false;\n        }\n        total_1++;\n        if (allKeys.has(key)) {\n          number_1++;\n        } else if (indeterminateKeysSet.has(key)) {\n          // 只要有一个半选，就不用再算了 ，父节点是半选\n          number_1 += 0.5;\n          return true;\n        }\n      });\n      if (!number_1 || number_1 === total_1) {\n        indeterminateKeysSet.delete(itemKey);\n      } else {\n        indeterminateKeysSet.add(itemKey);\n      }\n      if (number_1 && number_1 === total_1) {\n        allKeys.add(itemKey);\n      } else {\n        allKeys.delete(itemKey);\n      }\n    }\n  });\n};\n// also used by tree-select\nexport function getCheckedKeysByInitKeys(checkedKeys, key2nodeProps) {\n  var checkedKeysSet = new Set(checkedKeys || []);\n  var indeterminateKeysSet = new Set();\n  var childCheckedKeysSet = new Set();\n  checkedKeys.forEach(function (key) {\n    if (!childCheckedKeysSet.has(key)) {\n      var childKeys = getChildNodeKeys(key2nodeProps[key], key2nodeProps);\n      // 选中了节点，就找到所有符合条件的子节点的key.自身的选中状态需要根据children判断。\n      childKeys.forEach(function (v) {\n        childCheckedKeysSet.add(v);\n      });\n    }\n    if (key2nodeProps[key] && !key2nodeProps[key].pathParentKeys.some(function (_key) {\n      return checkedKeysSet.has(_key);\n    })) {\n      updateParent(key, key2nodeProps, checkedKeysSet, indeterminateKeysSet);\n    }\n  });\n  return {\n    checkedKeys: __spreadArray([], __read(new Set(__spreadArray(__spreadArray([], __read(checkedKeysSet), false), __read(childCheckedKeysSet), false))), false),\n    indeterminateKeys: __spreadArray([], __read(indeterminateKeysSet), false)\n  };\n}\n// also used by tree-select\nexport function getAllCheckedKeysByCheck(key, checked, checkedKeys, key2nodeProps, indeterminateKeys) {\n  if (!key2nodeProps[key]) {\n    return {\n      checkedKeys: checkedKeys,\n      indeterminateKeys: indeterminateKeys\n    };\n  }\n  var checkedKeysSet = new Set(checkedKeys);\n  var indeterminateKeysSet = new Set(indeterminateKeys);\n  var childKeys = getChildNodeKeys(key2nodeProps[key], key2nodeProps);\n  var allKeys = checkedKeysSet;\n  if (checked) {\n    // 选中了节点，就找到所有符合条件的子节点的key.自身的选中状态需要根据children判断。\n    allKeys.add(key);\n    indeterminateKeysSet.delete(key);\n    childKeys.forEach(function (v) {\n      allKeys.add(v);\n    });\n  } else {\n    indeterminateKeysSet.delete(key);\n    // 移除所有符合条件的子节点的key\n    allKeys.delete(key);\n    childKeys.forEach(function (v) {\n      allKeys.delete(v);\n    });\n  }\n  // 之后逐级更新父节点的选中状态。\n  updateParent(key, key2nodeProps, checkedKeysSet, indeterminateKeysSet);\n  return {\n    checkedKeys: __spreadArray([], __read(allKeys), false),\n    indeterminateKeys: __spreadArray([], __read(indeterminateKeysSet), false)\n  };\n}","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__read","o","m","Symbol","iterator","r","ar","e","next","done","push","value","error","__spreadArray","to","from","pack","l","Array","slice","concat","React","getTreeDataFromTreeChildren","treeChildren","loop","children","Children","map","child","isValidElement","key","props","getChildNodeKeys","node","key2nodeProps","nodes","Set","item","disabled","disableCheckbox","checkable","add","updateParent","allKeys","indeterminateKeysSet","pathParentKeys","reverse","forEach","itemKey","parent","total_1","number_1","some","_a","has","delete","getCheckedKeysByInitKeys","checkedKeys","checkedKeysSet","childCheckedKeysSet","childKeys","v","_key","indeterminateKeys","getAllCheckedKeysByCheck","checked"],"sources":["D:/Code/LegalGPT-frontend/node_modules/@arco-design/web-react/es/Tree/util.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport React from 'react';\nexport var getTreeDataFromTreeChildren = function (treeChildren) {\n    var loop = function (children) {\n        return React.Children.map(children, function (child) {\n            if (!React.isValidElement(child)) {\n                return;\n            }\n            var key = child.key;\n            return __assign(__assign({}, child.props), { key: key, children: loop(child.props.children) });\n        });\n    };\n    return loop(treeChildren);\n};\nexport function getChildNodeKeys(node, key2nodeProps) {\n    var nodes = new Set();\n    var loop = function (children) {\n        children.map(function (child) {\n            var key = child.key;\n            var item = key2nodeProps[key];\n            if (!item || item.disabled || item.disableCheckbox || item.checkable === false) {\n                return;\n            }\n            nodes.add(key);\n            loop(item.children || []);\n        });\n    };\n    if (node) {\n        loop(node.children || []);\n    }\n    return nodes;\n}\nvar updateParent = function (key, key2nodeProps, allKeys, indeterminateKeysSet) {\n    var pathParentKeys = __spreadArray([], __read(key2nodeProps[key].pathParentKeys), false);\n    // 逐级更新父节点的状态\n    pathParentKeys.reverse().forEach(function (itemKey) {\n        var parent = key2nodeProps[itemKey];\n        if (parent && !parent.disabled && !parent.disableCheckbox && parent.checkable !== false) {\n            var total_1 = 0;\n            var number_1 = 0;\n            parent.children.some(function (_a) {\n                var key = _a.key;\n                var item = key2nodeProps[key];\n                // 不符合可选条件\n                if (!item || item.disabled || item.disableCheckbox || item.checkable === false) {\n                    return false;\n                }\n                total_1++;\n                if (allKeys.has(key)) {\n                    number_1++;\n                }\n                else if (indeterminateKeysSet.has(key)) {\n                    // 只要有一个半选，就不用再算了 ，父节点是半选\n                    number_1 += 0.5;\n                    return true;\n                }\n            });\n            if (!number_1 || number_1 === total_1) {\n                indeterminateKeysSet.delete(itemKey);\n            }\n            else {\n                indeterminateKeysSet.add(itemKey);\n            }\n            if (number_1 && number_1 === total_1) {\n                allKeys.add(itemKey);\n            }\n            else {\n                allKeys.delete(itemKey);\n            }\n        }\n    });\n};\n// also used by tree-select\nexport function getCheckedKeysByInitKeys(checkedKeys, key2nodeProps) {\n    var checkedKeysSet = new Set(checkedKeys || []);\n    var indeterminateKeysSet = new Set();\n    var childCheckedKeysSet = new Set();\n    checkedKeys.forEach(function (key) {\n        if (!childCheckedKeysSet.has(key)) {\n            var childKeys = getChildNodeKeys(key2nodeProps[key], key2nodeProps);\n            // 选中了节点，就找到所有符合条件的子节点的key.自身的选中状态需要根据children判断。\n            childKeys.forEach(function (v) {\n                childCheckedKeysSet.add(v);\n            });\n        }\n        if (key2nodeProps[key] &&\n            !key2nodeProps[key].pathParentKeys.some(function (_key) { return checkedKeysSet.has(_key); })) {\n            updateParent(key, key2nodeProps, checkedKeysSet, indeterminateKeysSet);\n        }\n    });\n    return {\n        checkedKeys: __spreadArray([], __read(new Set(__spreadArray(__spreadArray([], __read(checkedKeysSet), false), __read(childCheckedKeysSet), false))), false),\n        indeterminateKeys: __spreadArray([], __read(indeterminateKeysSet), false),\n    };\n}\n// also used by tree-select\nexport function getAllCheckedKeysByCheck(key, checked, checkedKeys, key2nodeProps, indeterminateKeys) {\n    if (!key2nodeProps[key]) {\n        return {\n            checkedKeys: checkedKeys,\n            indeterminateKeys: indeterminateKeys,\n        };\n    }\n    var checkedKeysSet = new Set(checkedKeys);\n    var indeterminateKeysSet = new Set(indeterminateKeys);\n    var childKeys = getChildNodeKeys(key2nodeProps[key], key2nodeProps);\n    var allKeys = checkedKeysSet;\n    if (checked) {\n        // 选中了节点，就找到所有符合条件的子节点的key.自身的选中状态需要根据children判断。\n        allKeys.add(key);\n        indeterminateKeysSet.delete(key);\n        childKeys.forEach(function (v) {\n            allKeys.add(v);\n        });\n    }\n    else {\n        indeterminateKeysSet.delete(key);\n        // 移除所有符合条件的子节点的key\n        allKeys.delete(key);\n        childKeys.forEach(function (v) {\n            allKeys.delete(v);\n        });\n    }\n    // 之后逐级更新父节点的选中状态。\n    updateParent(key, key2nodeProps, checkedKeysSet, indeterminateKeysSet);\n    return {\n        checkedKeys: __spreadArray([], __read(allKeys), false),\n        indeterminateKeys: __spreadArray([], __read(indeterminateKeysSet), false),\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}