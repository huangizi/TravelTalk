{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useState, useEffect, useRef } from 'react';\nimport { isUndefined } from '../is';\nimport usePrevious from './usePrevious';\nexport default function useMergeValue(defaultStateValue, props) {\n  var _a = props || {},\n    defaultValue = _a.defaultValue,\n    value = _a.value;\n  var firstRenderRef = useRef(true);\n  var prevPropsValue = usePrevious(props.value);\n  var _b = __read(useState(!isUndefined(value) ? value : !isUndefined(defaultValue) ? defaultValue : defaultStateValue), 2),\n    stateValue = _b[0],\n    setStateValue = _b[1];\n  useEffect(function () {\n    // 第一次渲染时候，props.value 已经在useState里赋值给stateValue了，不需要再次赋值。\n    if (firstRenderRef.current) {\n      firstRenderRef.current = false;\n      return;\n    }\n    // 外部value等于undefined，也就是一开始有值，后来变成了undefined（\n    // 可能是移除了value属性，或者直接传入的undefined），那么就更新下内部的值。\n    // 如果value有值，在下一步逻辑中直接返回了value，不需要同步到stateValue\n    /**\n     *  prevPropsValue !== value: https://github.com/arco-design/arco-design/issues/1686\n     *  react18 严格模式下 useEffect 执行两次，可能出现 defaultValue 不生效的问题。\n     */\n    if (value === undefined && prevPropsValue !== value) {\n      setStateValue(value);\n    }\n  }, [value]);\n  var mergedValue = isUndefined(value) ? stateValue : value;\n  return [mergedValue, setStateValue, stateValue];\n}","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","useState","useEffect","useRef","isUndefined","usePrevious","useMergeValue","defaultStateValue","props","_a","defaultValue","firstRenderRef","prevPropsValue","_b","stateValue","setStateValue","current","undefined","mergedValue"],"sources":["D:/Code/ceo-copilot-frontend/node_modules/@arco-design/web-react/es/_util/hooks/useMergeValue.js"],"sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { useState, useEffect, useRef } from 'react';\nimport { isUndefined } from '../is';\nimport usePrevious from './usePrevious';\nexport default function useMergeValue(defaultStateValue, props) {\n    var _a = props || {}, defaultValue = _a.defaultValue, value = _a.value;\n    var firstRenderRef = useRef(true);\n    var prevPropsValue = usePrevious(props.value);\n    var _b = __read(useState(!isUndefined(value) ? value : !isUndefined(defaultValue) ? defaultValue : defaultStateValue), 2), stateValue = _b[0], setStateValue = _b[1];\n    useEffect(function () {\n        // 第一次渲染时候，props.value 已经在useState里赋值给stateValue了，不需要再次赋值。\n        if (firstRenderRef.current) {\n            firstRenderRef.current = false;\n            return;\n        }\n        // 外部value等于undefined，也就是一开始有值，后来变成了undefined（\n        // 可能是移除了value属性，或者直接传入的undefined），那么就更新下内部的值。\n        // 如果value有值，在下一步逻辑中直接返回了value，不需要同步到stateValue\n        /**\n         *  prevPropsValue !== value: https://github.com/arco-design/arco-design/issues/1686\n         *  react18 严格模式下 useEffect 执行两次，可能出现 defaultValue 不生效的问题。\n         */\n        if (value === undefined && prevPropsValue !== value) {\n            setStateValue(value);\n        }\n    }, [value]);\n    var mergedValue = isUndefined(value) ? stateValue : value;\n    return [mergedValue, setStateValue, stateValue];\n}\n"],"mappings":"AAAA,IAAIA,MAAM,GAAI,IAAI,IAAI,IAAI,CAACA,MAAM,IAAK,UAAUC,CAAC,EAAEC,CAAC,EAAE;EAClD,IAAIC,CAAC,GAAG,OAAOC,MAAM,KAAK,UAAU,IAAIH,CAAC,CAACG,MAAM,CAACC,QAAQ,CAAC;EAC1D,IAAI,CAACF,CAAC,EAAE,OAAOF,CAAC;EAChB,IAAIK,CAAC,GAAGH,CAAC,CAACI,IAAI,CAACN,CAAC,CAAC;IAAEO,CAAC;IAAEC,EAAE,GAAG,EAAE;IAAEC,CAAC;EAChC,IAAI;IACA,OAAO,CAACR,CAAC,KAAK,KAAK,CAAC,IAAIA,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAACM,CAAC,GAAGF,CAAC,CAACK,IAAI,EAAE,EAAEC,IAAI,EAAEH,EAAE,CAACI,IAAI,CAACL,CAAC,CAACM,KAAK,CAAC;EAC9E,CAAC,CACD,OAAOC,KAAK,EAAE;IAAEL,CAAC,GAAG;MAAEK,KAAK,EAAEA;IAAM,CAAC;EAAE,CAAC,SAC/B;IACJ,IAAI;MACA,IAAIP,CAAC,IAAI,CAACA,CAAC,CAACI,IAAI,KAAKT,CAAC,GAAGG,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAEH,CAAC,CAACI,IAAI,CAACD,CAAC,CAAC;IACpD,CAAC,SACO;MAAE,IAAII,CAAC,EAAE,MAAMA,CAAC,CAACK,KAAK;IAAE;EACpC;EACA,OAAON,EAAE;AACb,CAAC;AACD,SAASO,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,WAAW,QAAQ,OAAO;AACnC,OAAOC,WAAW,MAAM,eAAe;AACvC,eAAe,SAASC,aAAaA,CAACC,iBAAiB,EAAEC,KAAK,EAAE;EAC5D,IAAIC,EAAE,GAAGD,KAAK,IAAI,CAAC,CAAC;IAAEE,YAAY,GAAGD,EAAE,CAACC,YAAY;IAAEX,KAAK,GAAGU,EAAE,CAACV,KAAK;EACtE,IAAIY,cAAc,GAAGR,MAAM,CAAC,IAAI,CAAC;EACjC,IAAIS,cAAc,GAAGP,WAAW,CAACG,KAAK,CAACT,KAAK,CAAC;EAC7C,IAAIc,EAAE,GAAG5B,MAAM,CAACgB,QAAQ,CAAC,CAACG,WAAW,CAACL,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACK,WAAW,CAACM,YAAY,CAAC,GAAGA,YAAY,GAAGH,iBAAiB,CAAC,EAAE,CAAC,CAAC;IAAEO,UAAU,GAAGD,EAAE,CAAC,CAAC,CAAC;IAAEE,aAAa,GAAGF,EAAE,CAAC,CAAC,CAAC;EACpKX,SAAS,CAAC,YAAY;IAClB;IACA,IAAIS,cAAc,CAACK,OAAO,EAAE;MACxBL,cAAc,CAACK,OAAO,GAAG,KAAK;MAC9B;IACJ;IACA;IACA;IACA;IACA;AACR;AACA;AACA;IACQ,IAAIjB,KAAK,KAAKkB,SAAS,IAAIL,cAAc,KAAKb,KAAK,EAAE;MACjDgB,aAAa,CAAChB,KAAK,CAAC;IACxB;EACJ,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACX,IAAImB,WAAW,GAAGd,WAAW,CAACL,KAAK,CAAC,GAAGe,UAAU,GAAGf,KAAK;EACzD,OAAO,CAACmB,WAAW,EAAEH,aAAa,EAAED,UAAU,CAAC;AACnD"},"metadata":{},"sourceType":"module","externalDependencies":[]}