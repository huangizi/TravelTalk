{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport isEqualWith from 'lodash/isEqualWith';\nimport { valueInSet, transformValuesToSet } from '../util';\nimport { isArray, isFunction, isString } from '../../_util/is';\nimport Node from './node';\nvar Store = /** @class */function () {\n  function Store(options, value, config) {\n    var _this = this;\n    this.nodes = [];\n    this.flatNodes = [];\n    this.config = {};\n    // 初始化节点状态，附加状态信息字段： _checked,_halfChecked,parent,disabled\n    this._calcNodes = function (options, parent) {\n      if (!options) {\n        return [];\n      }\n      return options.map(function (option, index) {\n        return new Node(__assign(__assign({}, option), {\n          _index: index\n        }), _this.config, parent);\n      });\n    };\n    // this.flatNodes 保存所有可能的选中项\n    this._updateFlatNodes = function () {\n      var leafOnly = !_this.config.changeOnSelect;\n      _this.flatNodes = [];\n      var traversal = function (option) {\n        if (!option) return;\n        if (!leafOnly || option.isLeaf) {\n          _this.flatNodes.push(option);\n        }\n        if (isArray(option.children)) {\n          option.children.forEach(function (x) {\n            traversal(x);\n          });\n        }\n      };\n      _this.nodes.forEach(function (node) {\n        traversal(node);\n      });\n    };\n    /**\n     * values: 全部的选中值\n     * 根据values更新节点状态。不包含在values的节点都设置为未选中状态\n     * @memberof Store\n     */\n    this.setNodeCheckedByValue = function (initValues) {\n      var valuesSet = transformValuesToSet(initValues);\n      // 根据value设置节点初始选中状态\n      _this.flatNodes.forEach(function (node) {\n        var checked = false;\n        if (_this.config.showParent) {\n          if (node.pathValue.some(function (_, index, arr) {\n            return valueInSet(valuesSet, arr.slice(0, index + 1));\n          })) {\n            checked = true;\n          }\n        } else if (valueInSet(valuesSet, node.pathValue)) {\n          checked = true;\n        }\n        node.setCheckedStateIgnoreDisabled(checked);\n      });\n    };\n    /**\n     * 为当前节点插入子节点。动态加载时候用到\n     */\n    this.appendOptionChildren = function (node, children) {\n      if (children && node) {\n        // const checked = node._checked;\n        // node.setCheckedProperty(false);\n        var options = _this._calcNodes(children, node);\n        node.children = options;\n        _this._updateFlatNodes();\n        if (_this.config.changeOnSelect) {\n          // node.setCheckedProperty(checked);\n        } else {\n          node.setCheckedState(false);\n        }\n      }\n    };\n    /**\n     * 通过 value 查找对应的node节点。\n     * value: 是路径节点的value组成的数组\n     */\n    this.findNodeByValue = function (value) {\n      var targetNode = null;\n      if (!value || !value.length) {\n        return targetNode;\n      }\n      _this.flatNodes.some(function (node) {\n        if (isEqualWith(node.pathValue, value)) {\n          targetNode = node;\n        }\n      });\n      return targetNode;\n    };\n    /**\n     * 搜索所有label含有关键字的节点\n     */\n    this.searchNodeByLabel = function (inputStr) {\n      if (!inputStr) {\n        return _this.flatNodes;\n      }\n      var filterOption = _this.config.filterOption;\n      var filterMethod = isFunction(filterOption) ? filterOption : function (inputValue, node) {\n        return isString(node.label) && node.label.indexOf(inputValue) > -1;\n      };\n      return _this.flatNodes.filter(function (item) {\n        var pathNodes = item.getPathNodes();\n        return pathNodes.some(function (node) {\n          return filterMethod(inputStr, node._data);\n        });\n      });\n    };\n    /** 获取所有节点 */\n    this.getOptions = function () {\n      return _this.nodes;\n    };\n    /** 获取所有选中状态的节点。 aggregation: 是否聚合节点 */\n    this.getCheckedNodes = function () {\n      if (_this.config.showParent) {\n        return _this.getCheckedParentNodes();\n      }\n      return _this.flatNodes.filter(function (node) {\n        return node._checked;\n      });\n    };\n    // 按照父节点纬度聚合当前所有选中节点。\n    this.getCheckedParentNodes = function () {\n      var result = new Set();\n      _this.flatNodes.forEach(function (node) {\n        if (node._checked) {\n          var pathnodes = node.getPathNodes();\n          pathnodes.some(function (node) {\n            if (node._checked) {\n              if (!result.has(node)) {\n                result.add(node);\n              }\n              return true;\n            }\n          });\n        }\n      });\n      return Array.from(result);\n    };\n    this.config = __assign({}, config);\n    var values = Array.isArray(value) ? value : [];\n    this.nodes = this._calcNodes(options, null);\n    // 根据nodes获取选中值\n    this._updateFlatNodes();\n    this.setNodeCheckedByValue(values);\n  }\n  return Store;\n}();\nexport default Store;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","isEqualWith","valueInSet","transformValuesToSet","isArray","isFunction","isString","Node","Store","options","value","config","_this","nodes","flatNodes","_calcNodes","parent","map","option","index","_index","_updateFlatNodes","leafOnly","changeOnSelect","traversal","isLeaf","push","children","forEach","x","node","setNodeCheckedByValue","initValues","valuesSet","checked","showParent","pathValue","some","_","arr","slice","setCheckedStateIgnoreDisabled","appendOptionChildren","setCheckedState","findNodeByValue","targetNode","searchNodeByLabel","inputStr","filterOption","filterMethod","inputValue","label","indexOf","filter","item","pathNodes","getPathNodes","_data","getOptions","getCheckedNodes","getCheckedParentNodes","_checked","result","Set","pathnodes","has","add","Array","from","values"],"sources":["D:/Code/EchoGPT-frontend/node_modules/@arco-design/web-react/es/Cascader/base/store.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport isEqualWith from 'lodash/isEqualWith';\nimport { valueInSet, transformValuesToSet } from '../util';\nimport { isArray, isFunction, isString } from '../../_util/is';\nimport Node from './node';\nvar Store = /** @class */ (function () {\n    function Store(options, value, config) {\n        var _this = this;\n        this.nodes = [];\n        this.flatNodes = [];\n        this.config = {};\n        // 初始化节点状态，附加状态信息字段： _checked,_halfChecked,parent,disabled\n        this._calcNodes = function (options, parent) {\n            if (!options) {\n                return [];\n            }\n            return options.map(function (option, index) {\n                return new Node(__assign(__assign({}, option), { _index: index }), _this.config, parent);\n            });\n        };\n        // this.flatNodes 保存所有可能的选中项\n        this._updateFlatNodes = function () {\n            var leafOnly = !_this.config.changeOnSelect;\n            _this.flatNodes = [];\n            var traversal = function (option) {\n                if (!option)\n                    return;\n                if (!leafOnly || option.isLeaf) {\n                    _this.flatNodes.push(option);\n                }\n                if (isArray(option.children)) {\n                    option.children.forEach(function (x) {\n                        traversal(x);\n                    });\n                }\n            };\n            _this.nodes.forEach(function (node) {\n                traversal(node);\n            });\n        };\n        /**\n         * values: 全部的选中值\n         * 根据values更新节点状态。不包含在values的节点都设置为未选中状态\n         * @memberof Store\n         */\n        this.setNodeCheckedByValue = function (initValues) {\n            var valuesSet = transformValuesToSet(initValues);\n            // 根据value设置节点初始选中状态\n            _this.flatNodes.forEach(function (node) {\n                var checked = false;\n                if (_this.config.showParent) {\n                    if (node.pathValue.some(function (_, index, arr) { return valueInSet(valuesSet, arr.slice(0, index + 1)); })) {\n                        checked = true;\n                    }\n                }\n                else if (valueInSet(valuesSet, node.pathValue)) {\n                    checked = true;\n                }\n                node.setCheckedStateIgnoreDisabled(checked);\n            });\n        };\n        /**\n         * 为当前节点插入子节点。动态加载时候用到\n         */\n        this.appendOptionChildren = function (node, children) {\n            if (children && node) {\n                // const checked = node._checked;\n                // node.setCheckedProperty(false);\n                var options = _this._calcNodes(children, node);\n                node.children = options;\n                _this._updateFlatNodes();\n                if (_this.config.changeOnSelect) {\n                    // node.setCheckedProperty(checked);\n                }\n                else {\n                    node.setCheckedState(false);\n                }\n            }\n        };\n        /**\n         * 通过 value 查找对应的node节点。\n         * value: 是路径节点的value组成的数组\n         */\n        this.findNodeByValue = function (value) {\n            var targetNode = null;\n            if (!value || !value.length) {\n                return targetNode;\n            }\n            _this.flatNodes.some(function (node) {\n                if (isEqualWith(node.pathValue, value)) {\n                    targetNode = node;\n                }\n            });\n            return targetNode;\n        };\n        /**\n         * 搜索所有label含有关键字的节点\n         */\n        this.searchNodeByLabel = function (inputStr) {\n            if (!inputStr) {\n                return _this.flatNodes;\n            }\n            var filterOption = _this.config.filterOption;\n            var filterMethod = isFunction(filterOption)\n                ? filterOption\n                : function (inputValue, node) {\n                    return isString(node.label) && node.label.indexOf(inputValue) > -1;\n                };\n            return _this.flatNodes.filter(function (item) {\n                var pathNodes = item.getPathNodes();\n                return pathNodes.some(function (node) {\n                    return filterMethod(inputStr, node._data);\n                });\n            });\n        };\n        /** 获取所有节点 */\n        this.getOptions = function () {\n            return _this.nodes;\n        };\n        /** 获取所有选中状态的节点。 aggregation: 是否聚合节点 */\n        this.getCheckedNodes = function () {\n            if (_this.config.showParent) {\n                return _this.getCheckedParentNodes();\n            }\n            return _this.flatNodes.filter(function (node) {\n                return node._checked;\n            });\n        };\n        // 按照父节点纬度聚合当前所有选中节点。\n        this.getCheckedParentNodes = function () {\n            var result = new Set();\n            _this.flatNodes.forEach(function (node) {\n                if (node._checked) {\n                    var pathnodes = node.getPathNodes();\n                    pathnodes.some(function (node) {\n                        if (node._checked) {\n                            if (!result.has(node)) {\n                                result.add(node);\n                            }\n                            return true;\n                        }\n                    });\n                }\n            });\n            return Array.from(result);\n        };\n        this.config = __assign({}, config);\n        var values = Array.isArray(value) ? value : [];\n        this.nodes = this._calcNodes(options, null);\n        // 根据nodes获取选中值\n        this._updateFlatNodes();\n        this.setNodeCheckedByValue(values);\n    }\n    return Store;\n}());\nexport default Store;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}