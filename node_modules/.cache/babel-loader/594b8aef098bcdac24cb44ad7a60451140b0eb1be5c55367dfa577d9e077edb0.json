{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport get from 'lodash/get';\nimport setWith from 'lodash/setWith';\nimport has from 'lodash/has';\nimport omit from 'lodash/omit';\nimport { cloneDeep, set, iterativelyGetKeys } from './utils';\nimport { isArray, isObject, isString } from '../_util/is';\nimport promisify from './promisify';\nvar Store = /** @class */function () {\n  function Store() {\n    var _this = this;\n    // 是否正在提交\n    this.isSubmitting = false;\n    this.registerFields = [];\n    // 所有 form item value 的变动，都会通知这里注册到的 watcher\n    this.registerWatchers = [];\n    // 所有 form item 内部 errors, validating, touched 状态的变化，都会通知这里注册到的 watcher\n    this.registerStateWatchers = [];\n    // 和formControl 的 touched属性不一样。 只要被改过的字段，这里就会存储。并且不会跟随formControl被卸载而清除。\n    // reset 的时候清除\n    this.touchedFields = {};\n    this.store = {};\n    this.initialValues = {};\n    this.callbacks = {};\n    // 告知 form 状态改变，进行状态收集\n    this.innerCollectFormState = function () {\n      _this.notifyStateWatchers();\n    };\n    this.innerSetCallbacks = function (values) {\n      _this.callbacks = values;\n    };\n    this.registerStateWatcher = function (item) {\n      _this.registerStateWatchers.push(item);\n      return function () {\n        _this.registerStateWatchers = _this.registerStateWatchers.filter(function (x) {\n          return x !== item;\n        });\n      };\n    };\n    this.registerWatcher = function (item) {\n      _this.registerWatchers.push(item);\n      return function () {\n        _this.registerWatchers = _this.registerWatchers.filter(function (x) {\n          return x !== item;\n        });\n      };\n    };\n    // 收集所有control字段，并在组件卸载时移除\n    this.registerField = function (item) {\n      _this.registerFields.push(item);\n      _this.notifyWatchers();\n      return function () {\n        _this.registerFields = _this.registerFields.filter(function (x) {\n          return x !== item;\n        });\n        _this.notifyWatchers();\n      };\n    };\n    // hasField为true时，只返回传入field属性的control实例\n    // isFormList 目前只在校验时需要包含\n    // TODO formlist 实现缺陷，待优化\n    this.getRegisteredFields = function (hasField, options) {\n      if (hasField) {\n        return _this.registerFields.filter(function (control) {\n          var _a;\n          return control.hasFieldProps() && ((options === null || options === void 0 ? void 0 : options.containFormList) || !((_a = control.props) === null || _a === void 0 ? void 0 : _a.isFormList));\n        });\n      }\n      return _this.registerFields;\n    };\n    // 获取props.field === field 的control组件。\n    this.getRegisteredField = function (field) {\n      return _this.registerFields.filter(function (x) {\n        return x.props.field === field;\n      })[0];\n    };\n    // 通知所有的FormItem进行更新。\n    // setFieldValue: 外部调用setFieldsValue (setFieldValue等)方法触发更新\n    // innerSetValue: 控件例如Input，通过onChange事件触发的更新\n    // reset：重置\n    this.notify = function (type, info) {\n      if (type === 'setFieldValue' || type === 'innerSetValue' && !info.ignore) {\n        // type = reset时，在reset函数里处理\n        // if info.field is a[0], get a.0\n        _this._pushTouchField(info.changeValues ? iterativelyGetKeys(info.changeValues) : _this._getIterativelyKeysByField(info.field));\n      }\n      _this.registerFields.forEach(function (item) {\n        item.onStoreChange && item.onStoreChange(type, __assign(__assign({}, info), {\n          current: _this.store\n        }));\n      });\n    };\n    this.innerSetInitialValues = function (values) {\n      if (!values) return;\n      _this.initialValues = cloneDeep(values);\n      Object.keys(values).forEach(function (field) {\n        set(_this.store, field, values[field]);\n      });\n    };\n    this.innerSetInitialValue = function (field, value) {\n      if (!field) return;\n      _this.initialValues[field] = value;\n      // 组件在创建的时候，需要判断store里存的对应field的值是否生效。只要没有被操作过（touchedFields里不存在），就生效\n      if (!_this._inTouchFields(field)) {\n        set(_this.store, field, get(_this.initialValues, field));\n      }\n    };\n    /**\n     *\n     * 内部使用，更新value，会同时触发onChange 和 onValuesChange\n     * @options.isFormList  强制更新field对应的组件包括其子组件,form\n     */\n    this.innerSetFieldValue = function (field, value, options) {\n      var _a, _b, _c;\n      if (!field) return;\n      var prev = cloneDeep(_this.store);\n      set(_this.store, field, value);\n      _this.triggerValuesChange((_a = {}, _a[field] = value, _a));\n      _this.triggerTouchChange((_b = {}, _b[field] = value, _b));\n      _this.notify('innerSetValue', __assign(__assign({\n        prev: prev,\n        field: field\n      }, options), {\n        changeValues: (_c = {}, _c[field] = value, _c)\n      }));\n    };\n    // 内部使用\n    this.innerGetStore = function () {\n      return _this.store;\n    };\n    // 内部使用，返回原始对象，注入到组件的 value 都从这里获取值，cloneDeep 后的值每次引用地址是不同的\n    this.innerGetFieldValue = function (field) {\n      return get(_this.store, field);\n    };\n    // 获取所有被操作过的字段\n    this.getTouchedFields = function () {\n      return _this.getRegisteredFields(true).filter(function (item) {\n        return item.isTouched();\n      }).map(function (x) {\n        return x.props.field;\n      });\n    };\n    // 外部调用设置表单字段值\n    this.setFieldValue = function (field, value) {\n      var _a;\n      if (!field) return;\n      _this.setFields((_a = {}, _a[field] = {\n        value: value\n      }, _a));\n    };\n    // 外部调用，设置多个表单控件的值\n    this.setFieldsValue = function (values) {\n      if (isObject(values)) {\n        var fields = Object.keys(values);\n        var obj_1 = {};\n        fields.forEach(function (field) {\n          obj_1[field] = {\n            value: values[field]\n          };\n        });\n        _this.setFields(obj_1);\n      }\n    };\n    // 外部调用，设置多个表单控件的值，以及 error，touch 信息。\n    this.setFields = function (obj) {\n      var fields = Object.keys(obj);\n      var changeValues = {};\n      fields.forEach(function (field) {\n        var _a;\n        var item = obj[field];\n        var prev = cloneDeep(_this.store);\n        if (item) {\n          var info = {};\n          if ('error' in item) {\n            info.errors = item.error;\n          }\n          if ('warning' in item) {\n            info.warnings = item.warning;\n          }\n          if ('touched' in item) {\n            info.touched = item.touched;\n          }\n          if ('value' in item) {\n            set(_this.store, field, item.value);\n            changeValues[field] = item.value;\n          }\n          _this.notify('setFieldValue', {\n            data: info,\n            prev: prev,\n            field: field,\n            changeValues: (_a = {}, _a[field] = item.value, _a)\n          });\n        }\n      });\n      _this.triggerValuesChange(changeValues);\n    };\n    this.getFieldValue = function (field) {\n      return cloneDeep(get(_this.store, field));\n    };\n    // 获取单个字段的错误信息。\n    this.getFieldError = function (field) {\n      var item = _this.getRegisteredField(field);\n      return item ? item.getErrors() : null;\n    };\n    // 获取传入字段/全部的错误信息\n    this.getFieldsError = function (fields) {\n      var errors = {};\n      if (isArray(fields)) {\n        fields.map(function (field) {\n          var error = _this.getFieldError(field);\n          if (error) {\n            errors[field] = error;\n          }\n        });\n      } else {\n        _this.getRegisteredFields(true, {\n          containFormList: true\n        }).forEach(function (item) {\n          if (item.getErrors()) {\n            errors[item.props.field] = item.getErrors();\n          }\n        });\n      }\n      return errors;\n    };\n    this.getFields = function () {\n      return cloneDeep(_this.store);\n    };\n    this.getFieldsValue = function (fields) {\n      var values = {};\n      if (isArray(fields)) {\n        fields.forEach(function (key) {\n          set(values, key, _this.getFieldValue(key));\n        });\n        return values;\n      }\n      _this.getRegisteredFields(true).forEach(function (_a) {\n        var field = _a.props.field;\n        var value = get(_this.store, field);\n        set(values, field, value);\n      });\n      return values;\n    };\n    this.resetFields = function (fieldKeys) {\n      var prev = cloneDeep(_this.store);\n      var fields = isString(fieldKeys) ? [fieldKeys] : fieldKeys;\n      if (fields && isArray(fields)) {\n        var changeValues_1 = {};\n        fields.forEach(function (field) {\n          set(_this.store, field, _this.initialValues[field]);\n          changeValues_1[field] = get(_this.store, field);\n        });\n        _this.triggerValuesChange(changeValues_1);\n        _this.notify('reset', {\n          prev: prev,\n          field: fields\n        });\n        _this._popTouchField(fields);\n      } else {\n        var newValues_1 = {};\n        var changeValues_2 = cloneDeep(_this.store);\n        Object.keys(_this.initialValues).forEach(function (field) {\n          set(newValues_1, field, _this.initialValues[field]);\n        });\n        _this.store = newValues_1;\n        _this.getRegisteredFields(true).forEach(function (item) {\n          var key = item.props.field;\n          set(changeValues_2, key, get(_this.store, key));\n        });\n        _this.triggerValuesChange(changeValues_2);\n        _this._popTouchField();\n        _this.notify('reset', {\n          prev: prev,\n          field: Object.keys(changeValues_2)\n        });\n      }\n    };\n    this.validate = promisify(function (fieldsOrCallback, cb) {\n      var callback = function callback() {};\n      var controlItems = _this.getRegisteredFields(true, {\n        containFormList: true\n      });\n      if (isArray(fieldsOrCallback) && fieldsOrCallback.length > 0) {\n        controlItems = controlItems.filter(function (x) {\n          return fieldsOrCallback.indexOf(x.props.field) > -1;\n        });\n        callback = cb || callback;\n      } else if (typeof fieldsOrCallback === 'function') {\n        callback = fieldsOrCallback;\n      }\n      var promises = controlItems.map(function (x) {\n        return x.validateField();\n      });\n      Promise.all(promises).then(function (result) {\n        var errors = {};\n        var values = {};\n        result.map(function (x) {\n          var _a;\n          if (x.error) {\n            errors = __assign(__assign({}, errors), x.error);\n          }\n          var item = _this.getRegisteredField(x.field);\n          if (!((_a = item.props) === null || _a === void 0 ? void 0 : _a.isFormList)) {\n            // 保持和 2.46.0 之前版本行为一致，避免 {users: []}\n            set(values, x.field, x.value);\n          }\n        });\n        if (Object.keys(errors).length) {\n          var onValidateFail = _this.callbacks.onValidateFail;\n          onValidateFail && onValidateFail(errors);\n          callback && callback(errors, cloneDeep(values));\n        } else {\n          callback && callback(null, cloneDeep(values));\n        }\n      });\n    });\n    this.toggleSubmitting = function () {\n      _this.isSubmitting = !_this.isSubmitting;\n      _this.innerCollectFormState();\n    };\n    this.submit = function () {\n      _this.toggleSubmitting();\n      _this.validate(function (errors, values) {\n        var result;\n        var _a = _this.callbacks,\n          onSubmit = _a.onSubmit,\n          onSubmitFailed = _a.onSubmitFailed;\n        if (!errors && onSubmit) {\n          result = onSubmit(values);\n        }\n        if (errors && onSubmitFailed) {\n          result = onSubmitFailed(errors);\n        }\n        if (result && result.then) {\n          // resolve 或者 reject， 都需要更新 submitting 的提交状态\n          result.then(_this.toggleSubmitting, function (error) {\n            _this.toggleSubmitting();\n            // 保持以前的逻辑\n            return Promise.reject(error);\n          });\n        } else {\n          _this.toggleSubmitting();\n        }\n      });\n    };\n    this.getFieldsState = function (fields) {\n      var result = {};\n      var getItemState = function getItemState(item) {\n        if (!item) {\n          return null;\n        }\n        var error = item.getErrors();\n        return {\n          errors: error ? [error] : [],\n          warnings: item.getWarnings(),\n          validateStatus: item.getValidateStatus(),\n          isSubmitting: _this.isSubmitting,\n          isTouched: item.isTouched()\n        };\n      };\n      if (isArray(fields)) {\n        fields.forEach(function (key) {\n          result[key] = getItemState(_this.getRegisteredField(key));\n        });\n        return result;\n      }\n      _this.getRegisteredFields(true).forEach(function (item) {\n        result[item.props.field] = getItemState(item);\n      });\n      return result;\n    };\n    this.clearFields = function (fieldKeys) {\n      var prev = cloneDeep(_this.store);\n      var fields = isString(fieldKeys) ? [fieldKeys] : fieldKeys;\n      if (fields && isArray(fields)) {\n        var changeValues_3 = {};\n        fields.forEach(function (field) {\n          set(_this.store, field, undefined);\n          changeValues_3[field] = get(_this.store, field);\n        });\n        _this.triggerValuesChange(changeValues_3);\n        _this.notify('setFieldValue', {\n          prev: prev,\n          field: fields,\n          data: {\n            errors: null,\n            warnings: null\n          }\n        });\n        // this._popTouchField(fields);\n      } else {\n        var changeValues_4 = {};\n        _this.store = {};\n        _this.getRegisteredFields(true).forEach(function (item) {\n          var key = item.props.field;\n          set(changeValues_4, key, undefined);\n        });\n        _this.triggerValuesChange(changeValues_4);\n        // this._popTouchField();\n        _this.notify('setFieldValue', {\n          prev: prev,\n          field: Object.keys(changeValues_4),\n          data: {\n            errors: null,\n            warnings: null\n          }\n        });\n      }\n    };\n  }\n  Store.prototype.notifyWatchers = function () {\n    this.registerWatchers.forEach(function (item) {\n      item();\n    });\n  };\n  Store.prototype.notifyStateWatchers = function () {\n    this.registerStateWatchers.forEach(function (item) {\n      item();\n    });\n  };\n  Store.prototype.triggerValuesChange = function (value) {\n    if (value && Object.keys(value).length) {\n      var onValuesChange = this.callbacks.onValuesChange;\n      onValuesChange && onValuesChange(value, this.getFields());\n    }\n    this.notifyWatchers();\n  };\n  Store.prototype.triggerTouchChange = function (value) {\n    if (value && Object.keys(value).length) {\n      var onChange = this.callbacks.onChange;\n      onChange && onChange(value, this.getFields());\n    }\n  };\n  Store.prototype._getIterativelyKeysByField = function (field) {\n    if (!field) {\n      return [];\n    }\n    var fields = [].concat(field);\n    var keys = fields.map(function (item) {\n      return iterativelyGetKeys(set({}, item, undefined));\n    }).reduce(function (total, next) {\n      return total.concat(next);\n    }, []);\n    return __spreadArray([field], __read(keys), false);\n  };\n  Store.prototype._inTouchFields = function (field) {\n    var _this = this;\n    var keys = this._getIterativelyKeysByField(field);\n    // return fields.some((item) => has(fieldObj, item));\n    return keys.some(function (item) {\n      return has(_this.touchedFields, item);\n    });\n  };\n  Store.prototype._popTouchField = function (field) {\n    if (field === undefined) {\n      this.touchedFields = {};\n    }\n    var keys = this._getIterativelyKeysByField(field);\n    this.touchedFields = omit(this.touchedFields, keys);\n  };\n  Store.prototype._pushTouchField = function (field) {\n    var _this = this;\n    [].concat(field).forEach(function (key) {\n      setWith(_this.touchedFields, key, undefined, Object);\n    });\n  };\n  return Store;\n}();\nexport default Store;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__read","o","m","Symbol","iterator","r","ar","e","next","done","push","value","error","__spreadArray","to","from","pack","l","Array","slice","concat","get","setWith","has","omit","cloneDeep","set","iterativelyGetKeys","isArray","isObject","isString","promisify","Store","_this","isSubmitting","registerFields","registerWatchers","registerStateWatchers","touchedFields","store","initialValues","callbacks","innerCollectFormState","notifyStateWatchers","innerSetCallbacks","values","registerStateWatcher","item","filter","x","registerWatcher","registerField","notifyWatchers","getRegisteredFields","hasField","options","control","_a","hasFieldProps","containFormList","props","isFormList","getRegisteredField","field","notify","type","info","ignore","_pushTouchField","changeValues","_getIterativelyKeysByField","forEach","onStoreChange","current","innerSetInitialValues","keys","innerSetInitialValue","_inTouchFields","innerSetFieldValue","_b","_c","prev","triggerValuesChange","triggerTouchChange","innerGetStore","innerGetFieldValue","getTouchedFields","isTouched","map","setFieldValue","setFields","setFieldsValue","fields","obj_1","obj","errors","warnings","warning","touched","data","getFieldValue","getFieldError","getErrors","getFieldsError","getFields","getFieldsValue","key","resetFields","fieldKeys","changeValues_1","_popTouchField","newValues_1","changeValues_2","validate","fieldsOrCallback","cb","callback","controlItems","indexOf","promises","validateField","Promise","all","then","result","onValidateFail","toggleSubmitting","submit","onSubmit","onSubmitFailed","reject","getFieldsState","getItemState","getWarnings","validateStatus","getValidateStatus","clearFields","changeValues_3","undefined","changeValues_4","onValuesChange","onChange","reduce","total","some"],"sources":["D:/Code/EchoGPT-frontend/node_modules/@arco-design/web-react/es/Form/store.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport get from 'lodash/get';\nimport setWith from 'lodash/setWith';\nimport has from 'lodash/has';\nimport omit from 'lodash/omit';\nimport { cloneDeep, set, iterativelyGetKeys } from './utils';\nimport { isArray, isObject, isString } from '../_util/is';\nimport promisify from './promisify';\nvar Store = /** @class */ (function () {\n    function Store() {\n        var _this = this;\n        // 是否正在提交\n        this.isSubmitting = false;\n        this.registerFields = [];\n        // 所有 form item value 的变动，都会通知这里注册到的 watcher\n        this.registerWatchers = [];\n        // 所有 form item 内部 errors, validating, touched 状态的变化，都会通知这里注册到的 watcher\n        this.registerStateWatchers = [];\n        // 和formControl 的 touched属性不一样。 只要被改过的字段，这里就会存储。并且不会跟随formControl被卸载而清除。\n        // reset 的时候清除\n        this.touchedFields = {};\n        this.store = {};\n        this.initialValues = {};\n        this.callbacks = {};\n        // 告知 form 状态改变，进行状态收集\n        this.innerCollectFormState = function () {\n            _this.notifyStateWatchers();\n        };\n        this.innerSetCallbacks = function (values) {\n            _this.callbacks = values;\n        };\n        this.registerStateWatcher = function (item) {\n            _this.registerStateWatchers.push(item);\n            return function () {\n                _this.registerStateWatchers = _this.registerStateWatchers.filter(function (x) { return x !== item; });\n            };\n        };\n        this.registerWatcher = function (item) {\n            _this.registerWatchers.push(item);\n            return function () {\n                _this.registerWatchers = _this.registerWatchers.filter(function (x) { return x !== item; });\n            };\n        };\n        // 收集所有control字段，并在组件卸载时移除\n        this.registerField = function (item) {\n            _this.registerFields.push(item);\n            _this.notifyWatchers();\n            return function () {\n                _this.registerFields = _this.registerFields.filter(function (x) { return x !== item; });\n                _this.notifyWatchers();\n            };\n        };\n        // hasField为true时，只返回传入field属性的control实例\n        // isFormList 目前只在校验时需要包含\n        // TODO formlist 实现缺陷，待优化\n        this.getRegisteredFields = function (hasField, options) {\n            if (hasField) {\n                return _this.registerFields.filter(function (control) { var _a; return control.hasFieldProps() && ((options === null || options === void 0 ? void 0 : options.containFormList) || !((_a = control.props) === null || _a === void 0 ? void 0 : _a.isFormList)); });\n            }\n            return _this.registerFields;\n        };\n        // 获取props.field === field 的control组件。\n        this.getRegisteredField = function (field) {\n            return _this.registerFields.filter(function (x) { return x.props.field === field; })[0];\n        };\n        // 通知所有的FormItem进行更新。\n        // setFieldValue: 外部调用setFieldsValue (setFieldValue等)方法触发更新\n        // innerSetValue: 控件例如Input，通过onChange事件触发的更新\n        // reset：重置\n        this.notify = function (type, info) {\n            if (type === 'setFieldValue' || (type === 'innerSetValue' && !info.ignore)) {\n                // type = reset时，在reset函数里处理\n                // if info.field is a[0], get a.0\n                _this._pushTouchField(info.changeValues\n                    ? iterativelyGetKeys(info.changeValues)\n                    : _this._getIterativelyKeysByField(info.field));\n            }\n            _this.registerFields.forEach(function (item) {\n                item.onStoreChange &&\n                    item.onStoreChange(type, __assign(__assign({}, info), { current: _this.store }));\n            });\n        };\n        this.innerSetInitialValues = function (values) {\n            if (!values)\n                return;\n            _this.initialValues = cloneDeep(values);\n            Object.keys(values).forEach(function (field) {\n                set(_this.store, field, values[field]);\n            });\n        };\n        this.innerSetInitialValue = function (field, value) {\n            if (!field)\n                return;\n            _this.initialValues[field] = value;\n            // 组件在创建的时候，需要判断store里存的对应field的值是否生效。只要没有被操作过（touchedFields里不存在），就生效\n            if (!_this._inTouchFields(field)) {\n                set(_this.store, field, get(_this.initialValues, field));\n            }\n        };\n        /**\n         *\n         * 内部使用，更新value，会同时触发onChange 和 onValuesChange\n         * @options.isFormList  强制更新field对应的组件包括其子组件,form\n         */\n        this.innerSetFieldValue = function (field, value, options) {\n            var _a, _b, _c;\n            if (!field)\n                return;\n            var prev = cloneDeep(_this.store);\n            set(_this.store, field, value);\n            _this.triggerValuesChange((_a = {}, _a[field] = value, _a));\n            _this.triggerTouchChange((_b = {}, _b[field] = value, _b));\n            _this.notify('innerSetValue', __assign(__assign({ prev: prev, field: field }, options), { changeValues: (_c = {}, _c[field] = value, _c) }));\n        };\n        // 内部使用\n        this.innerGetStore = function () {\n            return _this.store;\n        };\n        // 内部使用，返回原始对象，注入到组件的 value 都从这里获取值，cloneDeep 后的值每次引用地址是不同的\n        this.innerGetFieldValue = function (field) {\n            return get(_this.store, field);\n        };\n        // 获取所有被操作过的字段\n        this.getTouchedFields = function () {\n            return _this.getRegisteredFields(true)\n                .filter(function (item) {\n                return item.isTouched();\n            })\n                .map(function (x) { return x.props.field; });\n        };\n        // 外部调用设置表单字段值\n        this.setFieldValue = function (field, value) {\n            var _a;\n            if (!field)\n                return;\n            _this.setFields((_a = {},\n                _a[field] = { value: value },\n                _a));\n        };\n        // 外部调用，设置多个表单控件的值\n        this.setFieldsValue = function (values) {\n            if (isObject(values)) {\n                var fields = Object.keys(values);\n                var obj_1 = {};\n                fields.forEach(function (field) {\n                    obj_1[field] = {\n                        value: values[field],\n                    };\n                });\n                _this.setFields(obj_1);\n            }\n        };\n        // 外部调用，设置多个表单控件的值，以及 error，touch 信息。\n        this.setFields = function (obj) {\n            var fields = Object.keys(obj);\n            var changeValues = {};\n            fields.forEach(function (field) {\n                var _a;\n                var item = obj[field];\n                var prev = cloneDeep(_this.store);\n                if (item) {\n                    var info = {};\n                    if ('error' in item) {\n                        info.errors = item.error;\n                    }\n                    if ('warning' in item) {\n                        info.warnings = item.warning;\n                    }\n                    if ('touched' in item) {\n                        info.touched = item.touched;\n                    }\n                    if ('value' in item) {\n                        set(_this.store, field, item.value);\n                        changeValues[field] = item.value;\n                    }\n                    _this.notify('setFieldValue', {\n                        data: info,\n                        prev: prev,\n                        field: field,\n                        changeValues: (_a = {}, _a[field] = item.value, _a),\n                    });\n                }\n            });\n            _this.triggerValuesChange(changeValues);\n        };\n        this.getFieldValue = function (field) {\n            return cloneDeep(get(_this.store, field));\n        };\n        // 获取单个字段的错误信息。\n        this.getFieldError = function (field) {\n            var item = _this.getRegisteredField(field);\n            return item ? item.getErrors() : null;\n        };\n        // 获取传入字段/全部的错误信息\n        this.getFieldsError = function (fields) {\n            var errors = {};\n            if (isArray(fields)) {\n                fields.map(function (field) {\n                    var error = _this.getFieldError(field);\n                    if (error) {\n                        errors[field] = error;\n                    }\n                });\n            }\n            else {\n                _this.getRegisteredFields(true, { containFormList: true }).forEach(function (item) {\n                    if (item.getErrors()) {\n                        errors[item.props.field] = item.getErrors();\n                    }\n                });\n            }\n            return errors;\n        };\n        this.getFields = function () {\n            return cloneDeep(_this.store);\n        };\n        this.getFieldsValue = function (fields) {\n            var values = {};\n            if (isArray(fields)) {\n                fields.forEach(function (key) {\n                    set(values, key, _this.getFieldValue(key));\n                });\n                return values;\n            }\n            _this.getRegisteredFields(true).forEach(function (_a) {\n                var field = _a.props.field;\n                var value = get(_this.store, field);\n                set(values, field, value);\n            });\n            return values;\n        };\n        this.resetFields = function (fieldKeys) {\n            var prev = cloneDeep(_this.store);\n            var fields = isString(fieldKeys) ? [fieldKeys] : fieldKeys;\n            if (fields && isArray(fields)) {\n                var changeValues_1 = {};\n                fields.forEach(function (field) {\n                    set(_this.store, field, _this.initialValues[field]);\n                    changeValues_1[field] = get(_this.store, field);\n                });\n                _this.triggerValuesChange(changeValues_1);\n                _this.notify('reset', { prev: prev, field: fields });\n                _this._popTouchField(fields);\n            }\n            else {\n                var newValues_1 = {};\n                var changeValues_2 = cloneDeep(_this.store);\n                Object.keys(_this.initialValues).forEach(function (field) {\n                    set(newValues_1, field, _this.initialValues[field]);\n                });\n                _this.store = newValues_1;\n                _this.getRegisteredFields(true).forEach(function (item) {\n                    var key = item.props.field;\n                    set(changeValues_2, key, get(_this.store, key));\n                });\n                _this.triggerValuesChange(changeValues_2);\n                _this._popTouchField();\n                _this.notify('reset', { prev: prev, field: Object.keys(changeValues_2) });\n            }\n        };\n        this.validate = promisify(function (fieldsOrCallback, cb) {\n            var callback = function () { };\n            var controlItems = _this.getRegisteredFields(true, {\n                containFormList: true,\n            });\n            if (isArray(fieldsOrCallback) && fieldsOrCallback.length > 0) {\n                controlItems = controlItems.filter(function (x) { return fieldsOrCallback.indexOf(x.props.field) > -1; });\n                callback = cb || callback;\n            }\n            else if (typeof fieldsOrCallback === 'function') {\n                callback = fieldsOrCallback;\n            }\n            var promises = controlItems.map(function (x) { return x.validateField(); });\n            Promise.all(promises).then(function (result) {\n                var errors = {};\n                var values = {};\n                result.map(function (x) {\n                    var _a;\n                    if (x.error) {\n                        errors = __assign(__assign({}, errors), x.error);\n                    }\n                    var item = _this.getRegisteredField(x.field);\n                    if (!((_a = item.props) === null || _a === void 0 ? void 0 : _a.isFormList)) {\n                        // 保持和 2.46.0 之前版本行为一致，避免 {users: []}\n                        set(values, x.field, x.value);\n                    }\n                });\n                if (Object.keys(errors).length) {\n                    var onValidateFail = _this.callbacks.onValidateFail;\n                    onValidateFail && onValidateFail(errors);\n                    callback && callback(errors, cloneDeep(values));\n                }\n                else {\n                    callback && callback(null, cloneDeep(values));\n                }\n            });\n        });\n        this.toggleSubmitting = function () {\n            _this.isSubmitting = !_this.isSubmitting;\n            _this.innerCollectFormState();\n        };\n        this.submit = function () {\n            _this.toggleSubmitting();\n            _this.validate(function (errors, values) {\n                var result;\n                var _a = _this.callbacks, onSubmit = _a.onSubmit, onSubmitFailed = _a.onSubmitFailed;\n                if (!errors && onSubmit) {\n                    result = onSubmit(values);\n                }\n                if (errors && onSubmitFailed) {\n                    result = onSubmitFailed(errors);\n                }\n                if (result && result.then) {\n                    // resolve 或者 reject， 都需要更新 submitting 的提交状态\n                    result.then(_this.toggleSubmitting, function (error) {\n                        _this.toggleSubmitting();\n                        // 保持以前的逻辑\n                        return Promise.reject(error);\n                    });\n                }\n                else {\n                    _this.toggleSubmitting();\n                }\n            });\n        };\n        this.getFieldsState = function (fields) {\n            var result = {};\n            var getItemState = function (item) {\n                if (!item) {\n                    return null;\n                }\n                var error = item.getErrors();\n                return {\n                    errors: error ? [error] : [],\n                    warnings: item.getWarnings(),\n                    validateStatus: item.getValidateStatus(),\n                    isSubmitting: _this.isSubmitting,\n                    isTouched: item.isTouched(),\n                };\n            };\n            if (isArray(fields)) {\n                fields.forEach(function (key) {\n                    result[key] = getItemState(_this.getRegisteredField(key));\n                });\n                return result;\n            }\n            _this.getRegisteredFields(true).forEach(function (item) {\n                result[item.props.field] = getItemState(item);\n            });\n            return result;\n        };\n        this.clearFields = function (fieldKeys) {\n            var prev = cloneDeep(_this.store);\n            var fields = isString(fieldKeys) ? [fieldKeys] : fieldKeys;\n            if (fields && isArray(fields)) {\n                var changeValues_3 = {};\n                fields.forEach(function (field) {\n                    set(_this.store, field, undefined);\n                    changeValues_3[field] = get(_this.store, field);\n                });\n                _this.triggerValuesChange(changeValues_3);\n                _this.notify('setFieldValue', {\n                    prev: prev,\n                    field: fields,\n                    data: {\n                        errors: null,\n                        warnings: null,\n                    },\n                });\n                // this._popTouchField(fields);\n            }\n            else {\n                var changeValues_4 = {};\n                _this.store = {};\n                _this.getRegisteredFields(true).forEach(function (item) {\n                    var key = item.props.field;\n                    set(changeValues_4, key, undefined);\n                });\n                _this.triggerValuesChange(changeValues_4);\n                // this._popTouchField();\n                _this.notify('setFieldValue', {\n                    prev: prev,\n                    field: Object.keys(changeValues_4),\n                    data: {\n                        errors: null,\n                        warnings: null,\n                    },\n                });\n            }\n        };\n    }\n    Store.prototype.notifyWatchers = function () {\n        this.registerWatchers.forEach(function (item) {\n            item();\n        });\n    };\n    Store.prototype.notifyStateWatchers = function () {\n        this.registerStateWatchers.forEach(function (item) {\n            item();\n        });\n    };\n    Store.prototype.triggerValuesChange = function (value) {\n        if (value && Object.keys(value).length) {\n            var onValuesChange = this.callbacks.onValuesChange;\n            onValuesChange && onValuesChange(value, this.getFields());\n        }\n        this.notifyWatchers();\n    };\n    Store.prototype.triggerTouchChange = function (value) {\n        if (value && Object.keys(value).length) {\n            var onChange = this.callbacks.onChange;\n            onChange && onChange(value, this.getFields());\n        }\n    };\n    Store.prototype._getIterativelyKeysByField = function (field) {\n        if (!field) {\n            return [];\n        }\n        var fields = [].concat(field);\n        var keys = fields\n            .map(function (item) { return iterativelyGetKeys(set({}, item, undefined)); })\n            .reduce(function (total, next) {\n            return total.concat(next);\n        }, []);\n        return __spreadArray([field], __read(keys), false);\n    };\n    Store.prototype._inTouchFields = function (field) {\n        var _this = this;\n        var keys = this._getIterativelyKeysByField(field);\n        // return fields.some((item) => has(fieldObj, item));\n        return keys.some(function (item) { return has(_this.touchedFields, item); });\n    };\n    Store.prototype._popTouchField = function (field) {\n        if (field === undefined) {\n            this.touchedFields = {};\n        }\n        var keys = this._getIterativelyKeysByField(field);\n        this.touchedFields = omit(this.touchedFields, keys);\n    };\n    Store.prototype._pushTouchField = function (field) {\n        var _this = this;\n        [].concat(field).forEach(function (key) {\n            setWith(_this.touchedFields, key, undefined, Object);\n        });\n    };\n    return Store;\n}());\nexport default Store;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}