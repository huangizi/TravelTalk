{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React, { createRef } from 'react';\nimport ContextHolderElement from '../_util/contextHolder';\nimport Message from '.';\nimport { isString } from '../_util/is';\nfunction useMessage(commonConfig) {\n  if (commonConfig === void 0) {\n    commonConfig = {};\n  }\n  var maxCount = commonConfig.maxCount,\n    _a = commonConfig.duration,\n    duration = _a === void 0 ? 3000 : _a,\n    _prefixCls = commonConfig.prefixCls;\n  var contextHolderRef = createRef();\n  var holderEle = React.createElement(ContextHolderElement, {\n    ref: contextHolderRef\n  });\n  var messageInstance = {};\n  var notice;\n  function addNotice(config) {\n    var prefixCls, rtl;\n    if (contextHolderRef.current) {\n      var contextConfig = contextHolderRef.current.getContextConfig();\n      rtl = contextConfig.rtl;\n      prefixCls = contextConfig.prefixCls;\n    }\n    var mergedPrefixCls = _prefixCls || prefixCls;\n    var _noticeProps = __assign({\n      position: 'top',\n      duration: duration\n    }, config);\n    var position = _noticeProps.position,\n      transitionClassNames = _noticeProps.transitionClassNames;\n    var id;\n    if (messageInstance[position]) {\n      var notices = messageInstance[position].state.notices;\n      if (notices.length >= maxCount) {\n        var updated = notices[0];\n        id = updated.id;\n        notices.shift();\n        messageInstance[position].add(__assign(__assign({}, _noticeProps), {\n          id: id\n        }));\n      } else {\n        id = messageInstance[position].add(_noticeProps);\n      }\n    } else {\n      notice = React.createElement(Message, {\n        transitionClassNames: transitionClassNames,\n        ref: function ref(instance) {\n          messageInstance[position] = instance;\n          if (messageInstance[position]) {\n            id = messageInstance[position].add(_noticeProps);\n          }\n        },\n        prefixCls: mergedPrefixCls,\n        rtl: rtl\n      });\n      contextHolderRef.current.addInstance(notice);\n    }\n    var close = function close() {\n      if (messageInstance[position]) {\n        messageInstance[position].remove(id);\n      }\n    };\n    return close;\n  }\n  var messageFuncs = {};\n  ['info', 'success', 'warning', 'error', 'normal'].forEach(function (type) {\n    messageFuncs[type] = function (config) {\n      var _config = isString(config) ? {\n        content: config\n      } : config;\n      return addNotice(__assign(__assign({}, _config), {\n        type: type\n      }));\n    };\n  });\n  return [messageFuncs, holderEle];\n}\nexport default useMessage;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","createRef","ContextHolderElement","Message","isString","useMessage","commonConfig","maxCount","_a","duration","_prefixCls","prefixCls","contextHolderRef","holderEle","createElement","ref","messageInstance","notice","addNotice","config","rtl","current","contextConfig","getContextConfig","mergedPrefixCls","_noticeProps","position","transitionClassNames","id","notices","state","updated","shift","add","instance","addInstance","close","remove","messageFuncs","forEach","type","_config","content"],"sources":["D:/Code/EchoGPT-frontend/node_modules/@arco-design/web-react/es/Message/useMessage.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { createRef } from 'react';\nimport ContextHolderElement from '../_util/contextHolder';\nimport Message from '.';\nimport { isString } from '../_util/is';\nfunction useMessage(commonConfig) {\n    if (commonConfig === void 0) { commonConfig = {}; }\n    var maxCount = commonConfig.maxCount, _a = commonConfig.duration, duration = _a === void 0 ? 3000 : _a, _prefixCls = commonConfig.prefixCls;\n    var contextHolderRef = createRef();\n    var holderEle = React.createElement(ContextHolderElement, { ref: contextHolderRef });\n    var messageInstance = {};\n    var notice;\n    function addNotice(config) {\n        var prefixCls, rtl;\n        if (contextHolderRef.current) {\n            var contextConfig = contextHolderRef.current.getContextConfig();\n            rtl = contextConfig.rtl;\n            prefixCls = contextConfig.prefixCls;\n        }\n        var mergedPrefixCls = _prefixCls || prefixCls;\n        var _noticeProps = __assign({ position: 'top', duration: duration }, config);\n        var position = _noticeProps.position, transitionClassNames = _noticeProps.transitionClassNames;\n        var id;\n        if (messageInstance[position]) {\n            var notices = messageInstance[position].state.notices;\n            if (notices.length >= maxCount) {\n                var updated = notices[0];\n                id = updated.id;\n                notices.shift();\n                messageInstance[position].add(__assign(__assign({}, _noticeProps), { id: id }));\n            }\n            else {\n                id = messageInstance[position].add(_noticeProps);\n            }\n        }\n        else {\n            notice = (React.createElement(Message, { transitionClassNames: transitionClassNames, ref: function (instance) {\n                    messageInstance[position] = instance;\n                    if (messageInstance[position]) {\n                        id = messageInstance[position].add(_noticeProps);\n                    }\n                }, prefixCls: mergedPrefixCls, rtl: rtl }));\n            contextHolderRef.current.addInstance(notice);\n        }\n        var close = function () {\n            if (messageInstance[position]) {\n                messageInstance[position].remove(id);\n            }\n        };\n        return close;\n    }\n    var messageFuncs = {};\n    ['info', 'success', 'warning', 'error', 'normal'].forEach(function (type) {\n        messageFuncs[type] = function (config) {\n            var _config = isString(config) ? { content: config } : config;\n            return addNotice(__assign(__assign({}, _config), { type: type }));\n        };\n    });\n    return [messageFuncs, holderEle];\n}\nexport default useMessage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}